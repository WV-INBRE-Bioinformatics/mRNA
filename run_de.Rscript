#! /usr/bin/Rscript


usage <- function() {
    cat("Usage:\n")
    cat("\trun_de.Rscript options\n")
    cat("Options:\n")
    cat("\t-b\t--bamDirectory\tDirectory containing bam files (required)\n")
    cat("\t-g\t--gtfFile\tgtf file with gene annotation (required)\n")
    cat("\t-O\t--outputFile\tOutput file to save R data image (required)\n")
    cat("\t-a\t--attribute\tAttribute whose value is specified for each sample by the bam file name. May be used in the model.\n")
    cat("\t\t\tRequired to be repeated exactly as many times as bam file names split via the -s (--filenameSplit) option.\n")
    cat("\t-o\t--organism\tOrganism for annotation via AnnotationDbi. Hs for human, Mm for mouse. Required.\n")
    cat("\t-c\t--sampleClusterFilename\tFilename for png image with sample cluster. Defaults to no image.\n")
    cat("\t-p\t--samplePCAFilename\tFilename for png image with PCA plot. Defaults to no image.\n")
    cat("\t-n\t--numHeatmapGenes\tNumber of genes to be used in the heatmap. Defaults to 250.\n")
    cat("\t-H\t--geneHeatmapHeight\tHeight (in pixels) of png image with gene heatmap. Defaults to 1920.\n")
    cat("\t\t--contrast\tAttribute in model to be used for a comparison (contrast). Defaults to value assumed from model.\n")
    cat("\t\t--numerator\tValue for contrast to be used for the numerator. Defaults to value assumed from model.\n")
    cat("\t\t--denominator\tValue for contrast to be used for the denominator. Defaults to value assumed from model.\n")
    cat("\t-s\t--filenameSplit\tString on which to split filenames to derive attribute values for sample. Defaults to \"-\".\n")
    cat("\t?\t--help\tShow this help message.\n")
}

parseArgs <- function(args) {
   attributes <- character(0)
   
   # default values:
   assign("filenameSplit", "-", .GlobalEnv)
   assign("numHeatmapGenes", 250, .GlobalEnv)
   assign("geneHeatmapHeight", 1920, .GlobalEnv)
   assign("rawCountFile", "raw_counts.csv", .GlobalEnv)
   assign("normalizedCountFile", "normalized_counts.csv", .GlobalEnv)
   
   while (length(args) > 0) {
       name = switch(args[[1]],
           "-b"="bamFileDir",
           "--bamDirectory"="bamFileDir",
           "-g"="gtffile",
           "--gtfFile"="gtffile",
           "-O"="outputFile",
           "--outputFile"="outputFile",
           "-a"="attribute",
           "--attribute"="attribute",
           "-o"="organism",
           "--organism"="organism",
           "-c"="sampleClusterFilename",
           "--sampleClusterFilename"="sampleClusterFilename",
           "-p"="samplePCAFilename",
           "--samplePCAFilename"="samplePCAFilename",
           "-n"="numHeatmapGenes",
           "--numHeatmapGenes"="numHeatmapGenes",
           "-h"="geneHeatmapFilename",
           "-H"="geneHeatmapHeight",
           "--geneHeatmapHeight"="geneHeatmapHeight",
           "-s"="filenameSplit",
           "--filenameSplit"="filenameSplit",
           "--help"="help",
           "?"="help"
       )
       if (length(name)==0 || is.null(name)) {
           cat(paste("Unknown option: ",args[[1]],"\n",sep=""))
           usage()
           stop()
       } else if (name=="help") {
           usage()
           q(save="no")
       } else if (name=="attribute") {
         attributes <- c(attributes, args[[2]])
	   } else if (name=="contrast") {
		 contrasts <- c(contrasts, args[[2]])
	   } else if (name=="numerator") {
	     numerators <- c(numerators, args[[2]])
	   } else if (name=="denominator") {
	     denominators <- c(denominators, args[[2]])
	   } else {
           assign(name, args[[2]], .GlobalEnv)
       }
       args <- args[-1:-2]
   }
   assign("attributes", attributes, .GlobalEnv)
}

checkExists <- function(msgs, msg, variable) {
    if (! variable %in% names(.GlobalEnv)) {
        msgs <- c(msgs, msg)
    }
    msgs
}

verify <- function() {
    msgs <- character(0)
    
    checks <- list(
        c("bam file directory must be defined", "bamFileDir"),
        c("gtf file must be defined", "gtffile"),
        c("Output file must be defined", "outputFile"),
        c("Organism must be defined", "organism")
    )
    
    for (check in checks) {
        msgs <- checkExists(msgs, check[[1]], check[[2]])
    }
    
    if (!all(sapply(strsplit(samples, split=filenameSplit), length)==numAttrs)) {
        msgs <- c(msgs, "File name structure does not match number of attributes provided\n"+
             "\tFiles must be named value1-value2-value3-...-valueN.bam, where n is the number of attributes supplied")
    }
    
    # Specific to this analysis:
    req_attrs <- c(all.vars(form), "timepoint")
    if (! all(req_attrs %in% attributes)) {
        msgs <- c(msgs, "Attributes must include all the following:\n", req_attrs)
    }
     
    if (length(msgs) > 0) {
        cat("Some required options were missing:\n")
        cat(paste("", msgs, sep="\t"), sep="\n")
        usage()
        q(save="no")
    }
}

annotateAndProcessResults <- function(res, outputFile, fpkm_mx=matrix(NA, ncol=0, nrow=0)) {
    # filter for FDR > 10%:
    sig <- res[! is.na(res$padj) & res$padj < 0.1 ,]
    
    if (nrow(sig) == 0) {
        cat("No significant genes found\n\n")
        return()
    }
    
    # order by (absolute) fold change
    sig <- sig[order(abs(sig$log2FoldChange), decreasing=T),]

    # add user friendly "fold change" column:
    sig$effect <- paste(round(2^abs(sig$log2FoldChange), 3), ifelse(sig$log2FoldChange > 0, "Up", "Down"))
    
    # add annotation:
    sig$symbol <- mapIds(get(paste("org",organism,"eg","db",sep=".")), keys=row.names(sig),
        column="SYMBOL",
        keytype="ENSEMBL",
        multivals="first")
        
    # add fpkm:
    sig <- cbind(sig,as.data.frame(fpkm_mx[rownames(sig),]))
    
    # write file:
    write.csv(sig, file=outputFile, quote=F)

}

# hard-coded for this analysis:
model = "~ treatment + infection + treatment:infection"
form <- formula(model)

# Read command line arguments:
cat("==============================\n");
cat("Reading command line arguments\n")
cat("==============================\n");
cat("\n")

args <- commandArgs(TRUE)

parseArgs(args)


numAttrs <- length(attributes)

if (length(checkExists(character(0), "bam file directory must be defined", "bamFileDir")) > 0) {
    cat("Error: bam file directory must be defined\n\n")
    usage()
    q(save="no")
}

files=list.files(path=bamFileDir, pattern=".*\\.bam$")
samples=substr(files, 1, nchar(files)-nchar(".bam"))

# check all required options are provided:
verify()

# build sample data table using attribute names supplied in command line
# and file names, which are expected to provide values for the sample attributes

sampleData <- unlist(strsplit(samples, split="-"))
sampleData <- as.data.frame(matrix(sampleData, ncol=numAttrs, byrow=T))
names(sampleData) <- attributes

# load required libraries

cat("===========================\n");
cat("Loading required libraries:\n")
cat("===========================\n");
cat("")

library(Rsamtools)
library(GenomicFeatures)
library(GenomicAlignments)
library(BiocParallel)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(AnnotationDbi)
library(paste("org",organism,"eg","db",sep="."), character.only=T)


#create BamFileList object

cat("======================\n")
cat("Creating bam file list\n")
cat("======================\n")
cat("\n")

bamfiles <- BamFileList(paste(bamFileDir,files,sep="/"))

# load transcript database from gtffile:

cat("==========================\n")
cat("Making transcript database\n")
cat("==========================\n")
cat("\n")

txdb <- makeTxDbFromGFF(gtffile, format="gtf", circ_seqs=character(0))

# create gene model

cat("===================\n")
cat("Creating gene model\n")
cat("===================\n")
cat("\n")

exonsByGene <- exonsBy(txdb, by="gene")

# set up for multiple processors
register(MulticoreParam(workers=24))

# create summarized experiment and configure with metadata

cat("=================================\n")
cat("Counting hits per gene per sample\n")
cat("=================================\n")
cat("\n")

se <- summarizeOverlaps(features=exonsByGene, reads=bamfiles, mode="Union", singleEnd=F, ignore.strand=F, fragments=F)
sampleData$infection <- relevel(sampleData$infection, "uninfected")
sampleData$treatment <- relevel(sampleData$treatment, "untreated")
colData(se) <- DataFrame(sampleData)
colnames(se) <- samples

# create DESeqDataSet

cat("=======================\n")
cat("Building DESeq data set\n")
cat("=======================\n")
cat("\n")

dds <- DESeqDataSet(se, form)
fpkm_mx <- fpkm(dds)

# rlog transform data for visualization
rlogData <- rlog(dds, blind=FALSE)

# make sample cluster map:
if (nchar(sampleClusterFilename) > 0) {
    cat("======================================================\n")
    cat("Creating cluster sample map to ",sampleClusterFilename,"\n")
    cat("======================================================\n")
    cat("\n")

    sampleDists <- dist(t(assay(rlogData)))
    sampleDistMatrix <- as.matrix(sampleDists)
    rownames(sampleDistMatrix) <- samples
    colnames(sampleDistMatrix) <- samples
    colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)

    png(filename=sampleClusterFilename)
    pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
    dev.off()
}

cat("========================================\n")
cat("Creating PCA plot to ",samplePCAFilename,"\n")
cat("========================================\n")
cat("\n")


png(filename=samplePCAFilename)
plotPCA(rlogData, intgroup=unique(c(all.vars(form)[1:2],"timepoint")))
dev.off()


do_analysis <- function(timepoint) {

  cat("Running analysis for ",timepoint,"\n")
  dds_subset <- DESeq(dds[, dds$timepoint==timepoint])
  fpkm_subset <- fpkm_mx[,which(sampleData$timepoint==timepoint)]
  cat("\tInteraction analysis\n")
  res_interaction <- results(dds_subset)
  cat("\tAnalysis on uninfected samples\n")
  res_uninf <- results(dds_subset, contrast=c("treatment","treated","untreated"))
  cat("\tAnalysis on infected samples\n")
  res_inf <- results(dds_subset, list(c("treatment_treated_vs_untreated", "treatmenttreated.infectioninfected")))
  annotateAndProcessResults(res_interaction, paste("significant",timepoint,"interaction.csv", sep="_"), fpkm_subset)
  annotateAndProcessResults(res_uninf, paste("significant",timepoint,"treated","vs","untreated","uninfected.csv", sep="_"), fpkm_subset)
  annotateAndProcessResults(res_inf, paste("significant",timepoint,"treated","vs","untreated","infected.csv", sep="_"), fpkm_subset)
}

for (timepoint in levels(sampleData$timepoint)) do_analysis(timepoint) 

write.csv(counts(dds, normalized=F), rawCountFile)
dds <- estimateSizeFactors(dds)
write.csv(counts(dds, normalized=T), normalizedCountFile)

cat("=============\n")
cat("Session Info:\n")
cat("=============\n")
cat("\n")

sessionInfo()

cat("==============================\n")
cat("Saving R image to ",outputFile,"\n")
cat("==============================\n")
cat("\n")

save.image(file=outputFile)

cat("=================\n")
cat("Analysis complete\n")
cat("=================\n")
